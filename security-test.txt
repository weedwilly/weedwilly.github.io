1. 曝露備份檔案
許多開發或部署時不慎，將備份 file（如 .bak, .zip, .tar.gz）留在網站根目錄，容易被他人直接下載取得原始程式和資料。

2. 虛擬後台/管理入口
留下如 /admin、/panel 等入口頁面（即使未啟用），皆可能被自動掃描工具發現並利用。

3. 弱化的主機/服務器漏洞
如果主機本身（如 Nginx/Apache）存在已知漏洞（如目錄穿越、HTTP解析漏洞），容易被攻擊者利用，雖然 GitHub Pages 可信，但自管伺服器仍有此一風險。

4. 依賴第三方服務與供應鏈攻擊
使用外部第三方 JS library（如分析、前端小工具）、CDN、表單寄送服務等，若第三方被攻破會牽動靜態網站安全。

5. Cross-Site Scripting (XSS)
若網站含用戶輸入功能，如搜尋、留言等，但沒有正確消毒及編碼，攻擊者可植入不安全 JS。

6. Directory/List 枚舉
未設 index.html 或目錄未防止列出，攻擊者可直接看到目錄結構，尋找敏感檔案或備份。

7. Clickjacking
他網站利用 iframe 嵌入本網站，誘使使用者進行隱藏行為，如登入、操作敏感功能。

8. DOS/DDoS 攻擊
攻擊者可瘋狂發送流量以癱瘓主機服務或耗盡資源，雖然不會資料外洩，仍會導致服務不可用。

9. 源碼洩漏與智慧財產權危機
JS 檔案全部開放，被偷看、反向工程（例如敏感演算法、API key）。

10. 檔案包含和目錄穿越 (File Inclusion/Directory Traversal)
若靜態網站有暴露的 path 或允許直接輸入檔名存取，可能導致惡意存取。

11. 機密資訊洩漏
config.js、.env、meta tags 等若包含敏感設定就可能外洩，例如服務 API 金鑰。
